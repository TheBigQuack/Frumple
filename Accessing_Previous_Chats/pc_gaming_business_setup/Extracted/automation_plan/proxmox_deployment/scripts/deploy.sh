
#!/bin/bash

# Comprehensive deployment script for investor website on Proxmox LXC
# This script handles the complete deployment process

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEPLOYMENT_DIR="$(dirname "$SCRIPT_DIR")"
PROJECT_DIR="/home/ubuntu/arcade_investor_site"
CONTAINER_NAME="investor-deployment"
DOMAIN="investor.local"

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_requirements() {
    log_info "Checking requirements..."
    
    # Check if Docker is installed
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    
    # Check if Docker Compose is installed
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose is not installed. Please install Docker Compose first."
        exit 1
    fi
    
    # Check if project directory exists
    if [ ! -d "$PROJECT_DIR" ]; then
        log_error "Project directory $PROJECT_DIR does not exist."
        exit 1
    fi
    
    log_success "All requirements met."
}

setup_environment() {
    log_info "Setting up environment..."
    
    # Copy environment file if it doesn't exist
    if [ ! -f "$DEPLOYMENT_DIR/docker/.env" ]; then
        log_info "Creating .env file from template..."
        cp "$DEPLOYMENT_DIR/docker/.env.example" "$DEPLOYMENT_DIR/docker/.env"
        log_warning "Please edit $DEPLOYMENT_DIR/docker/.env with your actual configuration values."
    fi
    
    # Generate NextAuth secret if not set
    if ! grep -q "NEXTAUTH_SECRET=generate_a_secure_secret_key_here" "$DEPLOYMENT_DIR/docker/.env"; then
        log_info "NextAuth secret already configured."
    else
        log_info "Generating NextAuth secret..."
        NEXTAUTH_SECRET=$(openssl rand -base64 32)
        sed -i "s/NEXTAUTH_SECRET=generate_a_secure_secret_key_here/NEXTAUTH_SECRET=$NEXTAUTH_SECRET/" "$DEPLOYMENT_DIR/docker/.env"
    fi
    
    log_success "Environment setup complete."
}

setup_ssl_certificates() {
    log_info "Setting up SSL certificates..."
    
    # Check if mkcert is installed
    if command -v mkcert &> /dev/null; then
        log_info "Using mkcert for local SSL certificates..."
        
        # Create certificates directory
        mkdir -p "$DEPLOYMENT_DIR/nginx/ssl"
        
        # Generate certificates
        cd "$DEPLOYMENT_DIR/nginx/ssl"
        mkcert -install
        mkcert "$DOMAIN" "*.${DOMAIN}" localhost 127.0.0.1 ::1
        
        # Rename files to match nginx configuration
        mv "${DOMAIN}+4.pem" "${DOMAIN}.pem" 2>/dev/null || true
        mv "${DOMAIN}+4-key.pem" "${DOMAIN}-key.pem" 2>/dev/null || true
        
        log_success "SSL certificates generated with mkcert."
    else
        log_warning "mkcert not found. Self-signed certificates will be generated by nginx container."
    fi
}

update_next_config() {
    log_info "Updating Next.js configuration for standalone output..."
    
    NEXT_CONFIG_FILE="$PROJECT_DIR/next.config.js"
    
    if [ -f "$NEXT_CONFIG_FILE" ]; then
        # Check if standalone output is already configured
        if grep -q "output.*standalone" "$NEXT_CONFIG_FILE"; then
            log_info "Next.js already configured for standalone output."
        else
            log_info "Adding standalone output configuration to next.config.js..."
            # Backup original file
            cp "$NEXT_CONFIG_FILE" "$NEXT_CONFIG_FILE.backup"
            
            # Add standalone output configuration
            cat > "$NEXT_CONFIG_FILE" << 'EOF'
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'standalone',
  experimental: {
    outputFileTracingRoot: undefined,
  },
  // Add your existing configuration here
}

module.exports = nextConfig
EOF
            log_success "Next.js configuration updated."
        fi
    else
        log_info "Creating next.config.js with standalone output..."
        cat > "$NEXT_CONFIG_FILE" << 'EOF'
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'standalone',
  experimental: {
    outputFileTracingRoot: undefined,
  },
}

module.exports = nextConfig
EOF
        log_success "Next.js configuration created."
    fi
}

add_health_check() {
    log_info "Adding health check endpoint..."
    
    HEALTH_CHECK_FILE="$PROJECT_DIR/healthcheck.js"
    
    cat > "$HEALTH_CHECK_FILE" << 'EOF'
const http = require('http');

const options = {
  hostname: 'localhost',
  port: 3000,
  path: '/api/health',
  method: 'GET',
  timeout: 2000
};

const req = http.request(options, (res) => {
  if (res.statusCode === 200) {
    process.exit(0);
  } else {
    process.exit(1);
  }
});

req.on('error', () => {
  process.exit(1);
});

req.on('timeout', () => {
  req.destroy();
  process.exit(1);
});

req.end();
EOF
    
    log_success "Health check script created."
}

build_and_deploy() {
    log_info "Building and deploying containers..."
    
    cd "$DEPLOYMENT_DIR/docker"
    
    # Pull latest images
    log_info "Pulling latest base images..."
    docker-compose pull
    
    # Build containers
    log_info "Building containers..."
    docker-compose build --no-cache
    
    # Start services
    log_info "Starting services..."
    docker-compose up -d
    
    # Wait for services to be healthy
    log_info "Waiting for services to be healthy..."
    sleep 30
    
    # Check service status
    docker-compose ps
    
    log_success "Deployment complete!"
}

setup_host_entries() {
    log_info "Setting up host entries..."
    
    # Add domain to /etc/hosts if not already present
    if ! grep -q "$DOMAIN" /etc/hosts; then
        log_info "Adding $DOMAIN to /etc/hosts..."
        echo "127.0.0.1 $DOMAIN" | sudo tee -a /etc/hosts
        log_success "Host entry added."
    else
        log_info "Host entry already exists."
    fi
}

show_completion_info() {
    log_success "Deployment completed successfully!"
    echo
    log_info "Access your investor website at:"
    echo "  - HTTPS: https://$DOMAIN"
    echo "  - HTTP:  http://$DOMAIN (redirects to HTTPS)"
    echo
    log_info "Useful commands:"
    echo "  - View logs: docker-compose -f $DEPLOYMENT_DIR/docker/docker-compose.yml logs -f"
    echo "  - Stop services: docker-compose -f $DEPLOYMENT_DIR/docker/docker-compose.yml down"
    echo "  - Restart services: docker-compose -f $DEPLOYMENT_DIR/docker/docker-compose.yml restart"
    echo "  - Update SSL certificates: $DEPLOYMENT_DIR/scripts/renew_certs.sh"
    echo
    log_info "Database access:"
    echo "  - Host: localhost"
    echo "  - Port: 5432 (if exposed)"
    echo "  - Database: investor_db"
    echo "  - User: investor_user"
    echo
    log_warning "Remember to:"
    echo "  - Update the .env file with your actual configuration"
    echo "  - Configure OAuth providers if using Google authentication"
    echo "  - Set up proper backup procedures for the database"
    echo "  - Review and customize the investor-specific database schema"
}

# Main execution
main() {
    log_info "Starting deployment of investor website..."
    
    check_requirements
    setup_environment
    setup_ssl_certificates
    update_next_config
    add_health_check
    build_and_deploy
    setup_host_entries
    show_completion_info
}

# Run main function
main "$@"
